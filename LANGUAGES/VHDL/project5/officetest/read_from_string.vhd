-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity read_from_string is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    req : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of read_from_string is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "read_from_string,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.081750,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=325,HLS_SYN_LUT=698}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv7_70 : STD_LOGIC_VECTOR (6 downto 0) := "1110000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal fail : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal read_r : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal input_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal input_r_ce0 : STD_LOGIC;
    signal input_r_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal result_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_ce0 : STD_LOGIC;
    signal result_we0 : STD_LOGIC;
    signal result_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_ce1 : STD_LOGIC;
    signal result_we1 : STD_LOGIC;
    signal result_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pointer_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal pointer_ce0 : STD_LOGIC;
    signal pointer_we0 : STD_LOGIC;
    signal pointer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pointer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pattern_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal pattern_ce0 : STD_LOGIC;
    signal pattern_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal error_array_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    signal error_array_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    signal error_array_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    signal brmerge_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_reg_537 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_541 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_300_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_545 : STD_LOGIC_VECTOR (6 downto 0);
    signal input_load_cast_fu_325_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_load_cast_reg_565 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_335_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_574 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_579 : STD_LOGIC_VECTOR (63 downto 0);
    signal pointer_addr_reg_584 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_cast_fu_354_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_cast_reg_589 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_reg_594 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_cast3_le6_fu_388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_cast3_le6_reg_610 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_616 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_625 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_1_fu_426_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_1_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_1_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal e_1_fu_501_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_663 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_addr_2_reg_667 : STD_LOGIC_VECTOR (4 downto 0);
    signal z_reg_211 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_223 : STD_LOGIC_VECTOR (4 downto 0);
    signal z1_reg_235 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_reg_257 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_p_0_phi_fu_271_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_cast_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_cast_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_load_1_cast_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_441_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_11_fu_523_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_311_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_321_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_346_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_358_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_fu_362_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal pattern_load_cast_fu_373_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_17_fu_404_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_fu_408_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_fu_513_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component read_from_string_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component read_from_string_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component read_from_string_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component read_from_string_eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    input_r_U : component read_from_string_bkb
    generic map (
        DataWidth => 6,
        AddressRange => 112,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_r_address0,
        ce0 => input_r_ce0,
        q0 => input_r_q0);

    result_U : component read_from_string_cud
    generic map (
        DataWidth => 32,
        AddressRange => 21,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => result_address0,
        ce0 => result_ce0,
        we0 => result_we0,
        d0 => result_d0,
        q0 => result_q0,
        address1 => result_address1,
        ce1 => result_ce1,
        we1 => result_we1,
        d1 => result_d1,
        q1 => result_q1);

    pointer_U : component read_from_string_dEe
    generic map (
        DataWidth => 32,
        AddressRange => 21,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pointer_address0,
        ce0 => pointer_ce0,
        we0 => pointer_we0,
        d0 => pointer_d0,
        q0 => pointer_q0);

    pattern_U : component read_from_string_eOg
    generic map (
        DataWidth => 9,
        AddressRange => 336,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pattern_address0,
        ce0 => pattern_ce0,
        q0 => pattern_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    count_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_382_p2 = ap_const_lv1_1) and (ap_ST_fsm_state6 = ap_CS_fsm) and (tmp_7_fu_377_p2 = ap_const_lv1_0))) then 
                count_reg_245 <= ap_const_lv32_0;
            elsif (((tmp_14_fu_463_p2 = ap_const_lv1_0) and (tmp_19_reg_625 = ap_const_lv1_0) and (ap_ST_fsm_state8 = ap_CS_fsm))) then 
                count_reg_245 <= count_1_reg_629;
            end if; 
        end if;
    end process;

    e_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_490_p2 = ap_const_lv1_0) and (ap_ST_fsm_state11 = ap_CS_fsm))) then 
                e_reg_257 <= e_1_fu_501_p2;
            elsif ((ap_ST_fsm_state10 = ap_CS_fsm)) then 
                e_reg_257 <= ap_const_lv5_5;
            end if; 
        end if;
    end process;

    j_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_fsm_state6 = ap_CS_fsm) and (tmp_s_fu_382_p2 = ap_const_lv1_0) and (tmp_7_fu_377_p2 = ap_const_lv1_0))) then 
                j_reg_223 <= j_1_reg_574;
            elsif ((ap_ST_fsm_state3 = ap_CS_fsm)) then 
                j_reg_223 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_0_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_541 = ap_const_lv1_1) and (brmerge_reg_537 = ap_const_lv1_0) and (ap_ST_fsm_state12 = ap_CS_fsm))) then 
                p_0_reg_268 <= result_q1;
            elsif (((ap_ST_fsm_state16 = ap_CS_fsm) or (ap_ST_fsm_state15 = ap_CS_fsm))) then 
                p_0_reg_268 <= result_q0;
            end if; 
        end if;
    end process;

    z1_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_382_p2 = ap_const_lv1_1) and (ap_ST_fsm_state6 = ap_CS_fsm) and (tmp_7_fu_377_p2 = ap_const_lv1_0))) then 
                z1_reg_235 <= z_cast3_le6_fu_388_p1;
            elsif (((tmp_14_fu_463_p2 = ap_const_lv1_0) and (tmp_19_reg_625 = ap_const_lv1_0) and (ap_ST_fsm_state8 = ap_CS_fsm))) then 
                z1_reg_235 <= z_1_fu_469_p2;
            end if; 
        end if;
    end process;

    z_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_fsm_state14 = ap_CS_fsm)) then 
                z_reg_211 <= i_reg_545;
            elsif (((ap_ST_fsm_state1 = ap_CS_fsm) and (ap_start = ap_const_logic_1))) then 
                z_reg_211 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_fsm_state1 = ap_CS_fsm) and (ap_start = ap_const_logic_1))) then
                brmerge_reg_537 <= brmerge_fu_288_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_fsm_state7 = ap_CS_fsm)) then
                count_1_reg_629 <= count_1_fu_426_p2;
                tmp_19_reg_625 <= z1_reg_235(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_19_reg_625 = ap_const_lv1_0) and (tmp_20_fu_441_p1 = ap_const_lv2_0) and (ap_ST_fsm_state8 = ap_CS_fsm))) then
                    error_array_0(5 downto 0) <= input_load_1_cast_fu_437_p1(5 downto 0);    error_array_0(8) <= input_load_1_cast_fu_437_p1(8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_19_reg_625 = ap_const_lv1_0) and (tmp_20_fu_441_p1 = ap_const_lv2_1) and (ap_ST_fsm_state8 = ap_CS_fsm))) then
                    error_array_1(5 downto 0) <= input_load_1_cast_fu_437_p1(5 downto 0);    error_array_1(8) <= input_load_1_cast_fu_437_p1(8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((tmp_20_fu_441_p1 = ap_const_lv2_1)) and not((tmp_20_fu_441_p1 = ap_const_lv2_0)) and (tmp_19_reg_625 = ap_const_lv1_0) and (ap_ST_fsm_state8 = ap_CS_fsm))) then
                    error_array_2(5 downto 0) <= input_load_1_cast_fu_437_p1(5 downto 0);    error_array_2(8) <= input_load_1_cast_fu_437_p1(8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_490_p2 = ap_const_lv1_1) and (ap_ST_fsm_state11 = ap_CS_fsm))) then
                fail <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_fsm_state2 = ap_CS_fsm)) then
                i_reg_545 <= i_fu_300_p2;
                tmp_reg_541 <= tmp_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_fsm_state3 = ap_CS_fsm)) then
                    input_load_cast_reg_565(5 downto 0) <= input_load_cast_fu_325_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_fsm_state4 = ap_CS_fsm)) then
                j_1_reg_574 <= j_1_fu_335_p2;
                tmp_4_reg_570 <= tmp_4_fu_329_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_fsm_state5 = ap_CS_fsm)) then
                k_reg_594 <= pointer_q0;
                    tmp_18_cast_reg_589(8 downto 4) <= tmp_18_cast_fu_354_p1(8 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_fu_329_p2 = ap_const_lv1_1) and (ap_ST_fsm_state4 = ap_CS_fsm))) then
                pointer_addr_reg_584 <= tmp_5_fu_341_p1(5 - 1 downto 0);
                    tmp_5_reg_579(4 downto 0) <= tmp_5_fu_341_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_fsm_state2 = ap_CS_fsm) and (tmp_fu_294_p2 = ap_const_lv1_0))) then
                read_r <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_fsm_state13 = ap_CS_fsm) and ((tmp_10_fu_517_p2 = ap_const_lv1_1) or (tmp_9_reg_616 = ap_const_lv1_1)))) then
                result_addr_2_reg_667 <= tmp_5_reg_579(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_9_reg_616 = ap_const_lv1_0) and (ap_ST_fsm_state13 = ap_CS_fsm))) then
                tmp_10_reg_663 <= tmp_10_fu_517_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_fu_377_p2 = ap_const_lv1_1) and (ap_ST_fsm_state6 = ap_CS_fsm))) then
                tmp_9_reg_616 <= tmp_9_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_382_p2 = ap_const_lv1_1) and (ap_ST_fsm_state6 = ap_CS_fsm) and (tmp_7_fu_377_p2 = ap_const_lv1_0))) then
                    z_cast3_le6_reg_610(6 downto 0) <= z_cast3_le6_fu_388_p1(6 downto 0);
            end if;
        end if;
    end process;
    error_array_0(7 downto 6) <= "00";
    error_array_0(31 downto 9) <= "00000000000000000000000";
    error_array_1(7 downto 6) <= "00";
    error_array_1(31 downto 9) <= "00000000000000000000000";
    error_array_2(7 downto 6) <= "00";
    error_array_2(31 downto 9) <= "00000000000000000000000";
    input_load_cast_reg_565(9 downto 6) <= "0000";
    tmp_5_reg_579(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_18_cast_reg_589(3 downto 0) <= "0000";
    tmp_18_cast_reg_589(9) <= '0';
    z_cast3_le6_reg_610(31 downto 7) <= "0000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, brmerge_reg_537, tmp_fu_294_p2, tmp_4_fu_329_p2, tmp_7_fu_377_p2, tmp_s_fu_382_p2, tmp_19_reg_625, tmp_14_fu_463_p2, exitcond_fu_490_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_ST_fsm_state1 = ap_CS_fsm) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_294_p2 = ap_const_lv1_1) and (brmerge_reg_537 = ap_const_lv1_1) and (ap_ST_fsm_state2 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif (((tmp_fu_294_p2 = ap_const_lv1_1) and (ap_ST_fsm_state2 = ap_CS_fsm) and (brmerge_reg_537 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_ST_fsm_state4 = ap_CS_fsm) and (tmp_4_fu_329_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((tmp_7_fu_377_p2 = ap_const_lv1_1) and (ap_ST_fsm_state6 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                elsif (((tmp_s_fu_382_p2 = ap_const_lv1_1) and (ap_ST_fsm_state6 = ap_CS_fsm) and (tmp_7_fu_377_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((tmp_14_fu_463_p2 = ap_const_lv1_0) and (tmp_19_reg_625 = ap_const_lv1_0) and (ap_ST_fsm_state8 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((exitcond_fu_490_p2 = ap_const_lv1_0) and (ap_ST_fsm_state11 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_fsm_state12 = ap_CS_fsm)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((ap_ST_fsm_state1 = ap_CS_fsm) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0_phi_fu_271_p6_assign_proc : process(ap_CS_fsm, result_q1, brmerge_reg_537, tmp_reg_541, p_0_reg_268)
    begin
        if (((tmp_reg_541 = ap_const_lv1_1) and (brmerge_reg_537 = ap_const_lv1_0) and (ap_ST_fsm_state12 = ap_CS_fsm))) then 
            ap_phi_mux_p_0_phi_fu_271_p6 <= result_q1;
        else 
            ap_phi_mux_p_0_phi_fu_271_p6 <= p_0_reg_268;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_fsm_state12 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_phi_mux_p_0_phi_fu_271_p6;
    brmerge_fu_288_p2 <= (read_r or fail);
    count_1_fu_426_p2 <= std_logic_vector(unsigned(count_reg_245) + unsigned(ap_const_lv32_1));
    e_1_fu_501_p2 <= std_logic_vector(unsigned(e_reg_257) + unsigned(ap_const_lv5_1));
    exitcond_fu_490_p2 <= "1" when (e_reg_257 = ap_const_lv5_15) else "0";
    i_fu_300_p2 <= std_logic_vector(unsigned(z_reg_211) + unsigned(ap_const_lv7_1));
    input_load_1_cast_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_r_q0),32));
    input_load_cast_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_r_q0),10));

    input_r_address0_assign_proc : process(ap_CS_fsm, tmp_3_fu_306_p1, tmp_13_fu_432_p1)
    begin
        if ((ap_ST_fsm_state7 = ap_CS_fsm)) then 
            input_r_address0 <= tmp_13_fu_432_p1(7 - 1 downto 0);
        elsif ((ap_ST_fsm_state2 = ap_CS_fsm)) then 
            input_r_address0 <= tmp_3_fu_306_p1(7 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_fsm_state7 = ap_CS_fsm) or (ap_ST_fsm_state2 = ap_CS_fsm))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_335_p2 <= std_logic_vector(unsigned(j_reg_223) + unsigned(ap_const_lv5_1));
    k_1_fu_392_p2 <= std_logic_vector(unsigned(k_reg_594) + unsigned(ap_const_lv32_1));

    pattern_address0_assign_proc : process(ap_CS_fsm, tmp_19_cast_fu_368_p1, tmp_20_cast_fu_413_p1)
    begin
        if ((ap_ST_fsm_state6 = ap_CS_fsm)) then 
            pattern_address0 <= tmp_20_cast_fu_413_p1(9 - 1 downto 0);
        elsif ((ap_ST_fsm_state5 = ap_CS_fsm)) then 
            pattern_address0 <= tmp_19_cast_fu_368_p1(9 - 1 downto 0);
        else 
            pattern_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    pattern_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_fsm_state6 = ap_CS_fsm) or (ap_ST_fsm_state5 = ap_CS_fsm))) then 
            pattern_ce0 <= ap_const_logic_1;
        else 
            pattern_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pattern_load_cast_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pattern_q0),10));

    pointer_address0_assign_proc : process(ap_CS_fsm, tmp_5_fu_341_p1, pointer_addr_reg_584)
    begin
        if (((ap_ST_fsm_state6 = ap_CS_fsm) or (ap_ST_fsm_state13 = ap_CS_fsm))) then 
            pointer_address0 <= pointer_addr_reg_584;
        elsif ((ap_ST_fsm_state4 = ap_CS_fsm)) then 
            pointer_address0 <= tmp_5_fu_341_p1(5 - 1 downto 0);
        else 
            pointer_address0 <= "XXXXX";
        end if; 
    end process;


    pointer_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_fsm_state6 = ap_CS_fsm) or (ap_ST_fsm_state4 = ap_CS_fsm) or (ap_ST_fsm_state13 = ap_CS_fsm))) then 
            pointer_ce0 <= ap_const_logic_1;
        else 
            pointer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pointer_d0_assign_proc : process(ap_CS_fsm, k_1_fu_392_p2)
    begin
        if ((ap_ST_fsm_state13 = ap_CS_fsm)) then 
            pointer_d0 <= ap_const_lv32_0;
        elsif ((ap_ST_fsm_state6 = ap_CS_fsm)) then 
            pointer_d0 <= k_1_fu_392_p2;
        else 
            pointer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pointer_we0_assign_proc : process(ap_CS_fsm, tmp_7_fu_377_p2, tmp_9_reg_616, tmp_10_fu_517_p2)
    begin
        if ((((ap_ST_fsm_state13 = ap_CS_fsm) and ((tmp_10_fu_517_p2 = ap_const_lv1_1) or (tmp_9_reg_616 = ap_const_lv1_1))) or ((tmp_7_fu_377_p2 = ap_const_lv1_1) and (ap_ST_fsm_state6 = ap_CS_fsm)))) then 
            pointer_we0 <= ap_const_logic_1;
        else 
            pointer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    result_address0_assign_proc : process(ap_CS_fsm, brmerge_reg_537, tmp_fu_294_p2, tmp_5_reg_579, result_addr_2_reg_667, tmp_2_fu_311_p1, tmp_1_fu_321_p1)
    begin
        if ((ap_ST_fsm_state14 = ap_CS_fsm)) then 
            result_address0 <= result_addr_2_reg_667;
        elsif ((ap_ST_fsm_state13 = ap_CS_fsm)) then 
            result_address0 <= tmp_5_reg_579(5 - 1 downto 0);
        elsif ((ap_ST_fsm_state10 = ap_CS_fsm)) then 
            result_address0 <= ap_const_lv5_4;
        elsif ((ap_ST_fsm_state8 = ap_CS_fsm)) then 
            result_address0 <= ap_const_lv5_0;
        elsif (((ap_ST_fsm_state2 = ap_CS_fsm) and (tmp_fu_294_p2 = ap_const_lv1_0))) then 
            result_address0 <= tmp_1_fu_321_p1(5 - 1 downto 0);
        elsif (((tmp_fu_294_p2 = ap_const_lv1_1) and (brmerge_reg_537 = ap_const_lv1_1) and (ap_ST_fsm_state2 = ap_CS_fsm))) then 
            result_address0 <= tmp_2_fu_311_p1(5 - 1 downto 0);
        else 
            result_address0 <= "XXXXX";
        end if; 
    end process;


    result_address1_assign_proc : process(ap_CS_fsm, exitcond_fu_490_p2, tmp_16_fu_496_p1, tmp_15_fu_513_p1)
    begin
        if (((exitcond_fu_490_p2 = ap_const_lv1_1) and (ap_ST_fsm_state11 = ap_CS_fsm))) then 
            result_address1 <= tmp_15_fu_513_p1(5 - 1 downto 0);
        elsif (((exitcond_fu_490_p2 = ap_const_lv1_0) and (ap_ST_fsm_state11 = ap_CS_fsm))) then 
            result_address1 <= tmp_16_fu_496_p1(5 - 1 downto 0);
        elsif ((ap_ST_fsm_state10 = ap_CS_fsm)) then 
            result_address1 <= ap_const_lv5_3;
        elsif ((ap_ST_fsm_state9 = ap_CS_fsm)) then 
            result_address1 <= ap_const_lv5_2;
        elsif ((ap_ST_fsm_state8 = ap_CS_fsm)) then 
            result_address1 <= ap_const_lv5_1;
        else 
            result_address1 <= "XXXXX";
        end if; 
    end process;


    result_ce0_assign_proc : process(ap_CS_fsm, brmerge_reg_537, tmp_fu_294_p2)
    begin
        if (((ap_ST_fsm_state14 = ap_CS_fsm) or (ap_ST_fsm_state13 = ap_CS_fsm) or (ap_ST_fsm_state10 = ap_CS_fsm) or (ap_ST_fsm_state8 = ap_CS_fsm) or ((tmp_fu_294_p2 = ap_const_lv1_1) and (brmerge_reg_537 = ap_const_lv1_1) and (ap_ST_fsm_state2 = ap_CS_fsm)) or ((ap_ST_fsm_state2 = ap_CS_fsm) and (tmp_fu_294_p2 = ap_const_lv1_0)))) then 
            result_ce0 <= ap_const_logic_1;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_ce1_assign_proc : process(ap_CS_fsm, exitcond_fu_490_p2)
    begin
        if (((ap_ST_fsm_state10 = ap_CS_fsm) or (ap_ST_fsm_state9 = ap_CS_fsm) or (ap_ST_fsm_state8 = ap_CS_fsm) or ((exitcond_fu_490_p2 = ap_const_lv1_1) and (ap_ST_fsm_state11 = ap_CS_fsm)) or ((exitcond_fu_490_p2 = ap_const_lv1_0) and (ap_ST_fsm_state11 = ap_CS_fsm)))) then 
            result_ce1 <= ap_const_logic_1;
        else 
            result_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    result_d0_assign_proc : process(ap_CS_fsm, error_array_2, tmp_11_fu_523_p2)
    begin
        if ((ap_ST_fsm_state14 = ap_CS_fsm)) then 
            result_d0 <= tmp_11_fu_523_p2;
        elsif ((ap_ST_fsm_state10 = ap_CS_fsm)) then 
            result_d0 <= error_array_2;
        elsif ((ap_ST_fsm_state8 = ap_CS_fsm)) then 
            result_d0 <= ap_const_lv32_100;
        else 
            result_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    result_d1_assign_proc : process(ap_CS_fsm, error_array_0, error_array_1, z_cast3_le6_reg_610, exitcond_fu_490_p2)
    begin
        if (((exitcond_fu_490_p2 = ap_const_lv1_0) and (ap_ST_fsm_state11 = ap_CS_fsm))) then 
            result_d1 <= ap_const_lv32_100;
        elsif ((ap_ST_fsm_state10 = ap_CS_fsm)) then 
            result_d1 <= error_array_1;
        elsif ((ap_ST_fsm_state9 = ap_CS_fsm)) then 
            result_d1 <= error_array_0;
        elsif ((ap_ST_fsm_state8 = ap_CS_fsm)) then 
            result_d1 <= z_cast3_le6_reg_610;
        else 
            result_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    result_we0_assign_proc : process(ap_CS_fsm, tmp_4_reg_570, tmp_9_reg_616, tmp_19_reg_625, tmp_14_fu_463_p2, tmp_10_reg_663)
    begin
        if (((ap_ST_fsm_state10 = ap_CS_fsm) or ((ap_ST_fsm_state14 = ap_CS_fsm) and (((tmp_10_reg_663 = ap_const_lv1_1) and (tmp_4_reg_570 = ap_const_lv1_1)) or ((tmp_9_reg_616 = ap_const_lv1_1) and (tmp_4_reg_570 = ap_const_lv1_1)))) or ((ap_ST_fsm_state8 = ap_CS_fsm) and ((tmp_14_fu_463_p2 = ap_const_lv1_1) or (tmp_19_reg_625 = ap_const_lv1_1))))) then 
            result_we0 <= ap_const_logic_1;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;


    result_we1_assign_proc : process(ap_CS_fsm, tmp_19_reg_625, tmp_14_fu_463_p2, exitcond_fu_490_p2)
    begin
        if (((ap_ST_fsm_state10 = ap_CS_fsm) or (ap_ST_fsm_state9 = ap_CS_fsm) or ((exitcond_fu_490_p2 = ap_const_lv1_0) and (ap_ST_fsm_state11 = ap_CS_fsm)) or ((ap_ST_fsm_state8 = ap_CS_fsm) and ((tmp_14_fu_463_p2 = ap_const_lv1_1) or (tmp_19_reg_625 = ap_const_lv1_1))))) then 
            result_we1 <= ap_const_logic_1;
        else 
            result_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_517_p2 <= "1" when (pattern_q0 = ap_const_lv9_100) else "0";
    tmp_11_fu_523_p2 <= std_logic_vector(unsigned(result_q0) + unsigned(ap_const_lv32_1));
    tmp_12_fu_362_p2 <= std_logic_vector(unsigned(tmp_18_cast_fu_354_p1) + unsigned(tmp_8_fu_358_p1));
    tmp_13_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z1_reg_235),64));
    tmp_14_fu_463_p2 <= "1" when (count_reg_245 = ap_const_lv32_3) else "0";
    tmp_15_fu_513_p0 <= req;
        tmp_15_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_fu_513_p0),64));

    tmp_16_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(e_reg_257),64));
    tmp_17_fu_404_p1 <= k_1_fu_392_p2(10 - 1 downto 0);
    tmp_18_cast_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_346_p3),10));
    tmp_18_fu_408_p2 <= std_logic_vector(unsigned(tmp_17_fu_404_p1) + unsigned(tmp_18_cast_reg_589));
        tmp_19_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_362_p2),64));

    tmp_1_fu_321_p0 <= req;
        tmp_1_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_321_p0),64));

        tmp_20_cast_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_fu_408_p2),64));

    tmp_20_fu_441_p1 <= count_reg_245(2 - 1 downto 0);
    tmp_2_fu_311_p0 <= req;
        tmp_2_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_311_p0),64));

    tmp_3_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z_reg_211),64));
    tmp_4_fu_329_p2 <= "1" when (unsigned(j_reg_223) < unsigned(ap_const_lv5_15)) else "0";
    tmp_5_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_223),64));
    tmp_6_fu_346_p3 <= (j_reg_223 & ap_const_lv4_0);
    tmp_7_fu_377_p2 <= "1" when (input_load_cast_reg_565 = pattern_load_cast_fu_373_p1) else "0";
    tmp_8_fu_358_p1 <= pointer_q0(10 - 1 downto 0);
    tmp_9_fu_398_p2 <= "1" when (k_1_fu_392_p2 = ap_const_lv32_10) else "0";
    tmp_fu_294_p2 <= "1" when (unsigned(z_reg_211) < unsigned(ap_const_lv7_70)) else "0";
    tmp_s_fu_382_p2 <= "1" when (j_reg_223 = ap_const_lv5_14) else "0";
    z_1_fu_469_p2 <= std_logic_vector(unsigned(z1_reg_235) + unsigned(ap_const_lv32_FFFFFFFF));
    z_cast3_le6_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z_reg_211),32));
end behav;
