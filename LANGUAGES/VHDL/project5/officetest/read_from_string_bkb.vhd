-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity read_from_string_bkb_rom is 
    generic(
             dwidth     : integer := 6; 
             awidth     : integer := 7; 
             mem_size    : integer := 112
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of read_from_string_bkb_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 to 2=> "000010", 3 => "000001", 4 to 6=> "000011", 7 to 9=> "000000", 10 => "011101", 
    11 to 13=> "000001", 14 to 16=> "000101", 17 to 19=> "000100", 20 to 22=> "000110", 23 to 24=> "010001", 
    25 => "011010", 26 => "100000", 27 to 28=> "010000", 29 => "001000", 30 => "011001", 
    31 => "001000", 32 => "011101", 33 to 34=> "000111", 35 to 40=> "001001", 41 to 43=> "001010", 
    44 to 45=> "010011", 46 to 47=> "010100", 48 to 49=> "001100", 50 to 51=> "001011", 52 => "010010", 
    53 to 55=> "001000", 56 => "010010", 57 => "001000", 58 => "010001", 59 => "011011", 
    60 => "010001", 61 => "011010", 62 => "010101", 63 => "100000", 64 => "010110", 
    65 => "011001", 66 => "001101", 67 => "001110", 68 => "011101", 69 => "100011", 
    70 to 72=> "001100", 73 => "100100", 74 => "001100", 75 => "010011", 76 => "100101", 
    77 => "010011", 78 to 81=> "001111", 82 to 85=> "010010", 86 to 87=> "011011", 88 to 91=> "010111", 
    92 => "100011", 93 => "100001", 94 => "100100", 95 => "100001", 96 => "001111", 
    97 => "100101", 98 => "011110", 99 => "011111", 100 => "011000", 101 => "011100", 
    102 to 103=> "100010", 104 => "010111", 105 => "011010", 106 => "100000", 107 => "011001", 
    108 => "011101", 109 => "100011", 110 => "100100", 111 => "100101" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity read_from_string_bkb is
    generic (
        DataWidth : INTEGER := 6;
        AddressRange : INTEGER := 112;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of read_from_string_bkb is
    component read_from_string_bkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    read_from_string_bkb_rom_U :  component read_from_string_bkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


