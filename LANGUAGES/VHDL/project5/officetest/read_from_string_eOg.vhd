-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity read_from_string_eOg_rom is 
    generic(
             dwidth     : integer := 9; 
             awidth     : integer := 9; 
             mem_size    : integer := 336
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of read_from_string_eOg_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "000000010", 1 => "000011010", 2 => "100000000", 3 to 15=> "000000000", 
    16 => "000000010", 17 => "000010001", 18 => "000010011", 19 => "000011010", 
    20 => "100000000", 21 to 31=> "000000000", 32 => "000000010", 33 => "000010001", 
    34 => "000010011", 35 => "000010101", 36 => "000001111", 37 => "000010111", 
    38 => "000011110", 39 => "000011010", 40 => "100000000", 41 to 47=> "000000000", 
    48 => "000000011", 49 => "000100000", 50 => "100000000", 51 to 63=> "000000000", 
    64 => "000000011", 65 => "000010000", 66 => "000010100", 67 => "000100000", 
    68 => "100000000", 69 to 79=> "000000000", 80 => "000000011", 81 => "000010000", 
    82 => "000010100", 83 => "000010110", 84 => "000001111", 85 => "000010111", 
    86 => "000011111", 87 => "000100000", 88 => "100000000", 89 to 96=> "000000000", 
    97 => "000011001", 98 => "100000000", 99 to 112=> "000000000", 113 => "000001000", 
    114 => "000001100", 115 => "000011001", 116 => "100000000", 117 to 128=> "000000000", 
    129 => "000001000", 130 => "000001100", 131 => "000001101", 132 => "000001111", 
    133 => "000010111", 134 => "000011000", 135 => "000011001", 136 => "100000000", 
    137 to 143=> "000000000", 144 => "000000001", 145 => "000011101", 146 => "100000000", 
    147 to 159=> "000000000", 160 => "000000001", 161 => "000000111", 162 => "000001011", 
    163 => "000011101", 164 => "100000000", 165 to 175=> "000000000", 176 => "000000001", 
    177 => "000000111", 178 => "000001011", 179 => "000001110", 180 => "000001111", 
    181 => "000010111", 182 => "000011100", 183 => "000011101", 184 => "100000000", 
    185 to 191=> "000000000", 192 => "000000101", 193 => "000001001", 194 => "000010010", 
    195 => "000100011", 196 => "100000000", 197 to 207=> "000000000", 208 => "000000101", 
    209 => "000001001", 210 => "000001000", 211 => "000001100", 212 => "000010010", 
    213 => "000100011", 214 => "100000000", 215 to 223=> "000000000", 224 => "000000101", 
    225 => "000001001", 226 => "000001000", 227 => "000001100", 228 => "000010010", 
    229 => "000100001", 230 => "000100010", 231 => "000100011", 232 => "100000000", 
    233 to 239=> "000000000", 240 => "000000100", 241 => "000001001", 242 => "000010010", 
    243 => "000100100", 244 => "100000000", 245 to 255=> "000000000", 256 => "000000100", 
    257 => "000001001", 258 => "000001000", 259 => "000001100", 260 => "000010010", 
    261 => "000100100", 262 => "100000000", 263 to 271=> "000000000", 272 => "000000100", 
    273 => "000001001", 274 => "000001000", 275 => "000001100", 276 => "000010010", 
    277 => "000100001", 278 => "000100010", 279 => "000100100", 280 => "100000000", 
    281 to 287=> "000000000", 288 => "000000110", 289 => "000001010", 290 => "000011011", 
    291 => "000100101", 292 => "100000000", 293 to 303=> "000000000", 304 => "000000110", 
    305 => "000001010", 306 => "000010001", 307 => "000010011", 308 => "000011011", 
    309 => "000100101", 310 => "100000000", 311 to 319=> "000000000", 320 => "000000110", 
    321 => "000001010", 322 => "000010001", 323 => "000010011", 324 => "000011011", 
    325 => "000001111", 326 => "000010111", 327 => "000100101", 328 => "100000000", 
    329 to 335=> "000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity read_from_string_eOg is
    generic (
        DataWidth : INTEGER := 9;
        AddressRange : INTEGER := 336;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of read_from_string_eOg is
    component read_from_string_eOg_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    read_from_string_eOg_rom_U :  component read_from_string_eOg_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


